pragma solidity 0.4.23;
//^0.6.0; 
//Это инструкции для компиляторов, версия указывается для того, чтобы контракт не скомпилировался с новой (ломающей) версией компилятора
// SPDX-License-Identifier: MIT

import "zeppelin-solidity/contracts/math/SafeMath.sol";
//import "@openzeppelin/contracts/math/SafeMath.sol";

/*
TZ: contract creator becomes the first superuser. Then he adds new users and superusers. Every superuser can add new users and superusers;
If user sends ether, his balance is increased. Then he can withdraw eteher from his balance;
*/
/*создатель контракта становится первым суперпользователем. Затем он добавляет новых пользователей и суперпользователей.
Каждый суперпользователь может добавлять новых пользователей и суперпользователей;
Если пользователь отправляет эфир, его баланс увеличивается (???). Увеличивается баланс у того кто отправляет?.
Затем он может вывести эфир со своего баланса;
*/

/*Имя контракта Уязвимость 1
uint - тип данных положительные целые числа
uint256 — положительное целое 256-битное целое
*/

contract VulnerableOne {
    using SafeMath for uint;

    struct UserInfo {
        uint256 created;
		uint256 ether_balance;
    }
    /*
	Юзер и его баланс это целые положительные числа от 0 до 2 в степени 256
	*/

    mapping (address => UserInfo) public users_map;
	mapping (address => bool) is_super_user;
	address[] users_list;
	modifier onlySuperUser() {
        require(is_super_user[msg.sender] == true);
        _;
    }
	/* По ключу "адрес в Этериум" сохраняем значение публичной карты Юзера в Юзер инфо.  
        	Создается таблица соотвествия "Является ли суперпользователем": адрес в Этериум - да/нет 
        	Создаем массив пользователей по адресам 
			Модификатор только для суперпользователей (?).
			Если юзер отправитель сообщения, то это суперпользователь (да в таблице), 
			если нет то прервать выполнение формирования таблицы адресов. 
		    То есть адреса добавляет только суперпользователь
		    
		 Возможно УЯЗВИМОСТЬ - отбрасываем супер пользователей, которых добавили новые суперпользователи 
		 одновременно с другими суперпользователями (?) 
		 Не понятно когда конец создания суперпользователей 
	*/

    event UserAdded(address new_user);

    constructor() public {
		set_super_user(msg.sender);
		add_new_user(msg.sender);
	}

    /*
	Конструктор, который назначает суперпользователем отправителя сообщения и 
	устанавливает функцию добавления нового пользователя отправителю сообщения .
	Конструктор публичный вызывается при создании контракта.
	*/

	function set_super_user(address _new_super_user) public {
		is_super_user[_new_super_user] = true;
	}
    /*уровень видимости public, т.е. функция доюавления новых суперюзеров 
	доступна  из других контрактов. Уязвимость?
    /*

	function pay() public payable {
		require(users_map[msg.sender].created != 0);
		users_map[msg.sender].ether_balance += msg.value;
	}
	/*Платеж производиться если 
	  Остановиться если создана карта отправителя сообщения равная 0, 
      Проверяем что Баланс эфира на карте пользователя-отправителя сообщения больше суммы в сообщении
      Уязвимость? Наверное провека баланса перед остановкой.Возможно msg.sender из вне, т.к. паблик
    /*

	function add_new_user(address _new_user) public onlySuperUser {
		require(users_map[_new_user].created == 0);
		users_map[_new_user] = UserInfo({ created: now, ether_balance: 0 });
		users_list.push(_new_user);
	}
	/*
      Если карта нового юзера не нулевая то добавлять в список. Уязвимость? может выполняться бесконечно наверное 
    /*

	function remove_user(address _remove_user) public {
		require(users_map[msg.sender].created != 0);
		delete(users_map[_remove_user]);
		bool shift = false;
		for (uint i=0; i<users_list.length; i++) {
			if (users_list[i] == _remove_user) {
				shift = true;
			}
			if (shift == true) {
				users_list[i] = users_list[i+1];
			}
		}
	}
    /*
      Изменение списка пользователей, не проняла 
    /*
	
	function withdraw() public {
        msg.sender.transfer(users_map[msg.sender].ether_balance);
		users_map[msg.sender].ether_balance = 0;
	}
    /*
      Перевод сам себе? тоже не поняла 
    /*
	function get_user_balance(address _user) public view returns(uint256) {
		return users_map[_user].ether_balance;
	}

}